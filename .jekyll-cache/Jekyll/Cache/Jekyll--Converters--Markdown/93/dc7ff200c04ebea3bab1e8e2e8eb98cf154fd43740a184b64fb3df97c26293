I"[<p>Recently, I decided to put together a <a href="https://nicholas.fish/recipes/">silly little website</a> so that my wife could upload her recipes to the internet. I’m a big fan of using static site generators like <a href="https://jekyllrb.com/">Jekyll</a> (the generator used to make this blog) because it allows you to upload new content without having to create new markup each time. For a technical person like me, it’s not problem writing a bit of yaml and markdown to get a page onto the internet for free with <a href="https://pages.github.com/">GitHub Pages</a>.</p>

<p>Now, add your non-developer wife into the mix, and you’ll quickly learn that yaml isn’t fun for non-developers. This makes using Jekyll by itself an issue, because you have to name and format files in a very specific way, and that’s hard to keep track of. The way this would typically be handled is by storing user data in a database, and serving it up with a server of some sort. This approach is honestly great, and I’ve used it on a lot of projects in the past.</p>

<p>This one though, is a little different. I know that my wife and I are the only ones who will be modifying this data, and I also know that I want to host it for free. See where this is headed? Was the title enough of a clue?</p>

<p>So it begins, I build a Jekyll site. I manually craft the yaml files, and get an idea of how it should look manually. She gives me some pointers about how the site should look, and I make the tweaks. Once she checked off on the layout, I got to work figuring out how she could get her information onto the site without having to learn yaml. Obviously this needs to be in the same website, so an API it is. I develop in C# in my day job, and I really enjoy it, so I got to work writing some code to tie this together.</p>

<p>Of course there’s still a problem with writing a normal ASP.NET core api for this, and that’s the cost of hosting. This API is expected to have very little traffic, so I don’t want to pay to have this running all the time. I could run it on my home network, but I’m picky about what I allow to run here, and what I expose to the internet. After careful consideration, I landed on Azure Functions. These are perfect for the job! I can use all the language features I’m used to in C#, and I don’t have to worry about the server.</p>

<p>That covers the website communicating with the backend. But what is the backend anyways? Where are we storing all this information? Well GitHub supports Jekyll with very minimal configuration, all you need to do is enable it in your repo, and it will start getting served automatically. When you commit new changes to the branch you specify (master by default) they are quickly reflected in your site. Sweet! Free CI/CD already created with no work from me, I’m going to use this to my advantage. All I need to do from this API to get the deployment to work, is commit the right files into the master branch of the GitHub repo.</p>

<p>Lucky for me, there’s already a .NET library for interacting with GIT. That’s <a href="https://github.com/libgit2/libgit2sharp/">libgit2sharp</a>.</p>
:ET